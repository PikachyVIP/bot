import re
from enum import Enum

import discord
from discord.ext import commands, tasks
from discord import app_commands
import mysql.connector
from datetime import datetime, timedelta
import asyncio
import json
from typing import Optional, Literal, Union
from mysql.connector import Error
from data import mysqlconf

class LoopInterval(Enum):
    NONE = "–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–∞"
    WEEKLY = "–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é"
    MONTHLY = "–∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü"
    YEARLY = "–∫–∞–∂–¥—ã–π –≥–æ–¥"



def calculate_next_date(self, original_date: datetime, interval: str) -> datetime:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è"""
    if interval == LoopInterval.WEEKLY.name:
        return original_date + timedelta(weeks=1)
    elif interval == LoopInterval.MONTHLY.name:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞
        next_month = original_date.month + 1
        next_year = original_date.year
        if next_month > 12:
            next_month = 1
            next_year += 1
        return original_date.replace(year=next_year, month=next_month)
    elif interval == LoopInterval.YEARLY.name:
        return original_date.replace(year=original_date.year + 1)
    return original_date


class EventCommands(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.update_timers.start()
        self.active_messages = {}
        self.MYSQL_CONFIG = mysqlconf

    def get_db_connection(self):
        try:
            connection = mysql.connector.connect(**self.MYSQL_CONFIG)
            return connection
        except Error as e:
            print(f"Error connecting to MySQL: {e}")
            return None

    async def event_autocomplete(
            self,
            interaction: discord.Interaction,
            current: str
    ) -> list[app_commands.Choice[str]]:
        connection = self.get_db_connection()
        if not connection:
            return []

        cursor = connection.cursor(dictionary=True)
        cursor.execute("SELECT event_name FROM events WHERE event_name LIKE %s", (f"%{current}%",))
        events = cursor.fetchall()
        connection.close()

        return [
            app_commands.Choice(name=event['event_name'], value=event['event_name'])
            for event in events
        ]


    async def loop_autocomplete(
        self,
        interaction: discord.Interaction,
        current: str
    ) -> list[app_commands.Choice[str]]:
        return [
            app_commands.Choice(name=interval.value, value=interval.name)
            for interval in LoopInterval
            if current.lower() in interval.value.lower()
        ]

    @app_commands.command(name="event", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏")
    @app_commands.describe(
        action="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        name="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è",
        date="–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD:MM:YYYY",
        time="–í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM",
        loop="–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è",
        recipients="–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (@user, @role –∏–ª–∏ all)"
    )
    @app_commands.choices(action=[
        app_commands.Choice(name="install", value="install"),
        app_commands.Choice(name="create", value="create"),
        app_commands.Choice(name="list", value="list"),
        app_commands.Choice(name="remove", value="remove")
    ])
    @app_commands.autocomplete(name=event_autocomplete, loop=loop_autocomplete)
    async def event_command(
            self,
            interaction: discord.Interaction,
            action: Literal["install", "create", "list", "remove"],
            name: Optional[str] = None,
            date: Optional[str] = None,
            time: Optional[str] = None,
            loop: Optional[str] = None,
            recipients: Optional[str] = None
    ):
        if action == "install":
            await self.install_event_system(interaction)
        elif action == "create":
            await self.create_event(interaction, name, date, time, loop, recipients)
        elif action == "list":
            await self.list_events(interaction)
        elif action == "remove":
            await self.remove_event(interaction, name)

    async def install_event_system(self, interaction: discord.Interaction):
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Å–æ–±—ã—Ç–∏–π"""
        if not interaction.user.guild_permissions.administrator:
            return await interaction.response.send_message("–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", ephemeral=True)

        guild = interaction.guild
        overwrites = {
            guild.default_role: discord.PermissionOverwrite(read_messages=True),
            guild.me: discord.PermissionOverwrite(read_messages=True)
        }

        try:
            category = await guild.create_category("üìÖ –°–æ–±—ã—Ç–∏—è")
            main_channel = await guild.create_text_channel(
                "—Å–æ–±—ã—Ç–∏—è",
                category=category,
                overwrites=overwrites
            )
            log_channel = await guild.create_text_channel(
                "–ª–æ–≥–∏-—Å–æ–±—ã—Ç–∏–π",
                category=category,
                overwrites=overwrites
            )

            connection = self.get_db_connection()
            if connection:
                cursor = connection.cursor()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã (–¥–æ–±–∞–≤–ª—è–µ–º log_channel_id –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS event_config (
                        guild_id BIGINT PRIMARY KEY,
                        channel_id BIGINT NOT NULL,
                        log_channel_id BIGINT NOT NULL,
                        category_id BIGINT NOT NULL
                    )
                """)

                # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ (—Ç–µ–ø–µ—Ä—å —Å log_channel_id)
                cursor.execute("""
                    INSERT INTO event_config (guild_id, channel_id, log_channel_id, category_id)
                    VALUES (%s, %s, %s, %s)
                    ON DUPLICATE KEY UPDATE
                    channel_id = VALUES(channel_id),
                    log_channel_id = VALUES(log_channel_id),
                    category_id = VALUES(category_id)
                """, (guild.id, main_channel.id, log_channel.id, category.id))

                connection.commit()
                connection.close()

            await interaction.response.send_message(
                f"–°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.mention}\n"
                f"–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {main_channel.mention}\n"
                f"–õ–æ–≥-–∫–∞–Ω–∞–ª: {log_channel.mention}",
                ephemeral=True
            )
        except Exception as e:
            await interaction.response.send_message(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {str(e)}",
                ephemeral=True
            )

    # –í –º–µ—Ç–æ–¥–µ send_notification (–∏—Å–ø–æ–ª—å–∑—É–µ–º log_channel_id):
    async def send_notification(self, event):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è"""
        connection = self.get_db_connection()
        if not connection:
            return

        try:
            cursor = connection.cursor(dictionary=True)

            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥-–∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ channel_id –∏–∑ —Å–æ–±—ã—Ç–∏—è
            cursor.execute("""
                SELECT log_channel_id FROM event_config 
                WHERE guild_id = (
                    SELECT guild_id FROM event_config 
                    WHERE channel_id = %s
                )
            """, (event['channel_id'],))
            config = cursor.fetchone()

            if config and config['log_channel_id']:
                log_channel = self.bot.get_channel(config['log_channel_id'])
                if log_channel:
                    recipients = json.loads(event['recipients'])
                    mentions = []
                    for r in recipients:
                        if r == "all":
                            mentions.append("@everyone")
                        elif r.startswith("role:"):
                            role_id = int(r.split(":")[1])
                            role = log_channel.guild.get_role(role_id)
                            if role:
                                mentions.append(role.mention)
                        elif r.startswith("user:"):
                            user_id = int(r.split(":")[1])
                            user = log_channel.guild.get_member(user_id)
                            if user:
                                mentions.append(user.mention)

                    loop_text = LoopInterval[event['loop_interval']].value if event['loop_interval'] else "–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–∞"

                    embed = discord.Embed(
                        title="üîî –°–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!",
                        description=(
                            f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {event['event_name']}\n"
                            f"**–¢–∏–ø:** {loop_text}\n"
                            f"**–î–ª—è:** {' '.join(mentions) if mentions else '–≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'}"
                        ),
                        color=discord.Color.green()
                    )

                    await log_channel.send(
                        content=' '.join(mentions) if mentions else None,
                        embed=embed
                    )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        finally:
            if connection.is_connected():
                connection.close()

    async def create_event(
            self,
            interaction: discord.Interaction,
            name: str,
            date: str,
            time: str,
            loop: str,
            recipients: str
    ):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
            if not re.match(r'^\d{2}:\d{2}$', time):
                return await interaction.response.send_message(
                    "‚è∞ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä 15:30)",
                    ephemeral=True
                )

            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            event_datetime = datetime.strptime(f"{date} {time}", "%d:%m:%Y %H:%M")

            connection = self.get_db_connection()
            if not connection:
                return await interaction.response.send_message(
                    "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î",
                    ephemeral=True
                )

            cursor = connection.cursor(dictionary=True)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞
            cursor.execute(
                "SELECT channel_id FROM event_config WHERE guild_id = %s",
                (interaction.guild.id,)
            )
            config = cursor.fetchone()

            if not config:
                return await interaction.response.send_message(
                    "üîß –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /event install",
                    ephemeral=True
                )

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            recipient_data = []
            if recipients.lower() == "all":
                recipient_data = ["all"]
            else:
                for mention in recipients.split():
                    if mention.startswith(('<@&', '<@')):
                        try:
                            entity_id = int(mention.strip('<@&>'))
                            if mention.startswith('<@&'):
                                recipient_data.append(f"role:{entity_id}")
                            else:
                                recipient_data.append(f"user:{entity_id}")
                        except ValueError:
                            continue

            if not recipient_data:
                return await interaction.response.send_message(
                    "üë• –ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ –∏–ª–∏ —É–∫–∞–∑–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                    ephemeral=True
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –ë–î
            cursor.execute("""
                INSERT INTO events (
                    event_name,
                    event_date,
                    recipients,
                    channel_id,
                    loop_interval
                ) VALUES (%s, %s, %s, %s, %s)
            """, (
                name,
                event_datetime,
                json.dumps(recipient_data),
                config['channel_id'],
                loop
            ))
            connection.commit()
            event_id = cursor.lastrowid

            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º
            event_channel = self.bot.get_channel(config['channel_id'])
            if event_channel:
                time_left = event_datetime - datetime.now()
                days = time_left.days
                hours, remainder = divmod(time_left.seconds, 3600)
                minutes, _ = divmod(remainder, 60)

                loop_text = LoopInterval[loop].value if loop else "–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–∞"

                embed = discord.Embed(
                    title=f"üîî –°–æ–±—ã—Ç–∏–µ: {name}",
                    description=(
                        f"**üóì –î–∞—Ç–∞:** {event_datetime.strftime('%d.%m.%Y %H:%M')}\n"
                        f"**‚è≥ –û—Å—Ç–∞–ª–æ—Å—å:** {days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç\n"
                        f"**üîÑ –ü–æ–≤—Ç–æ—Ä:** {loop_text}"
                    ),
                    color=discord.Color.gold()
                )

                view = discord.ui.View()
                view.add_item(discord.ui.Button(
                    style=discord.ButtonStyle.primary,
                    label="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä",
                    custom_id=f"update_timer_{event_id}"
                ))
                view.add_item(discord.ui.Button(
                    style=discord.ButtonStyle.secondary,
                    label="üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫",
                    custom_id=f"show_list_{event_id}"
                ))

                message = await event_channel.send(embed=embed, view=view)
                self.active_messages[event_id] = message.id

                await interaction.response.send_message(
                    f"‚úÖ –°–æ–±—ã—Ç–∏–µ '{name}' —Å–æ–∑–¥–∞–Ω–æ!\n"
                    f"–°–ª–µ–¥—É—é—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {event_datetime.strftime('%d.%m.%Y %H:%M')}\n"
                    f"–ü–æ–≤—Ç–æ—Ä: {loop_text}",
                    ephemeral=True
                )
            else:
                await interaction.response.send_message(
                    "‚ùå –ö–∞–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    ephemeral=True
                )

        except Exception as e:
            await interaction.response.send_message(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}",
                ephemeral=True
            )
        finally:
            if connection and connection.is_connected():
                connection.close()

    @tasks.loop(minutes=1)
    async def update_timers(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π"""
        connection = self.get_db_connection()
        if not connection:
            return

        cursor = connection.cursor(dictionary=True)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            cursor.execute("SELECT * FROM events")
            events = cursor.fetchall()

            for event in events:
                event_datetime = event['event_date']
                now = datetime.now()

                # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ
                if event_datetime <= now:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await self.send_notification(event)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π
                    if event['loop_interval'] and event['loop_interval'] != 'NONE':
                        new_date = calculate_next_date(
                            event_datetime,
                            event['loop_interval']
                        )

                        cursor.execute("""
                            UPDATE events SET event_date = %s
                            WHERE event_id = %s
                        """, (new_date, event['event_id']))
                        connection.commit()

                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º
                        if event['event_id'] in self.active_messages:
                            try:
                                channel = self.bot.get_channel(event['channel_id'])
                                if channel:
                                    message = await channel.fetch_message(
                                        self.active_messages[event['event_id']]
                                    )

                                    time_left = new_date - datetime.now()
                                    days = time_left.days
                                    hours, remainder = divmod(time_left.seconds, 3600)
                                    minutes, _ = divmod(remainder, 60)

                                    loop_text = LoopInterval[event['loop_interval']].value if event[
                                        'loop_interval'] else "–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–∞"

                                    embed = discord.Embed(
                                        title=f"üîî –°–æ–±—ã—Ç–∏–µ: {event['event_name']}",
                                        description=(
                                            f"**üóì –î–∞—Ç–∞:** {new_date.strftime('%d.%m.%Y %H:%M')}\n"
                                            f"**‚è≥ –û—Å—Ç–∞–ª–æ—Å—å:** {days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç\n"
                                            f"**üîÑ –ü–æ–≤—Ç–æ—Ä:** {loop_text}"
                                        ),
                                        color=discord.Color.gold()
                                    )

                                    view = discord.ui.View()
                                    view.add_item(discord.ui.Button(
                                        style=discord.ButtonStyle.primary,
                                        label="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä",
                                        custom_id=f"update_timer_{event['event_id']}"
                                    ))
                                    view.add_item(discord.ui.Button(
                                        style=discord.ButtonStyle.secondary,
                                        label="üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫",
                                        custom_id=f"show_list_{event['event_id']}"
                                    ))

                                    await message.edit(embed=embed, view=view)
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    else:
                        # –î–ª—è –Ω–µ–ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        if event['event_id'] in self.active_messages:
                            try:
                                channel = self.bot.get_channel(event['channel_id'])
                                if channel:
                                    message = await channel.fetch_message(
                                        self.active_messages[event['event_id']]
                                    )
                                    await message.delete()
                            except:
                                pass
                            finally:
                                del self.active_messages[event['event_id']]
        finally:
            if connection.is_connected():
                connection.close()

    async def list_events(self, interaction: discord.Interaction):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π"""
        connection = self.get_db_connection()
        if not connection:
            return await interaction.response.send_message(
                "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î",
                ephemeral=True
            )

        cursor = connection.cursor(dictionary=True)
        cursor.execute("""
            SELECT * FROM events 
            WHERE event_date > NOW() 
            ORDER BY event_date
        """)
        events = cursor.fetchall()
        connection.close()

        if not events:
            return await interaction.response.send_message(
                "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π",
                ephemeral=True
            )

        embed = discord.Embed(
            title="–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π",
            color=discord.Color.green()
        )

        for event in events:
            event_date = event['event_date']
            time_left = event_date - datetime.now()
            days = time_left.days
            hours, remainder = divmod(time_left.seconds, 3600)
            minutes, _ = divmod(remainder, 60)

            recipients = json.loads(event['recipients'])
            recipient_text = []
            for r in recipients:
                if r == "all":
                    recipient_text.append("–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏")
                elif r.startswith("role:"):
                    role_id = int(r.split(":")[1])
                    role = interaction.guild.get_role(role_id)
                    recipient_text.append(f"–†–æ–ª—å: {role.mention if role else '–ù–µ –Ω–∞–π–¥–µ–Ω–∞'}")
                elif r.startswith("user:"):
                    user_id = int(r.split(":")[1])
                    user = interaction.guild.get_member(user_id)
                    recipient_text.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.mention if user else '–ù–µ –Ω–∞–π–¥–µ–Ω'}")

            embed.add_field(
                name=event['event_name'],
                value=f"**–î–∞—Ç–∞:** {event_date.strftime('%d.%m.%Y %H:%M')}\n"
                      f"**–û—Å—Ç–∞–ª–æ—Å—å:** {days}–¥ {hours}—á {minutes}–º\n"
                      f"**–î–ª—è:** {', '.join(recipient_text)}\n"
                      f"**ID:** {event['event_id']}",
                inline=False
            )

        await interaction.response.send_message(embed=embed, ephemeral=True)

    async def remove_event(self, interaction: discord.Interaction, name: str):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        connection = self.get_db_connection()
        if not connection:
            return await interaction.response.send_message(
                "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î",
                ephemeral=True
            )

        cursor = connection.cursor(dictionary=True)

        try:
            # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            connection.start_transaction()

            # 1. –ù–∞—Ö–æ–¥–∏–º —Å–æ–±—ã—Ç–∏–µ
            cursor.execute(
                "SELECT event_id FROM events WHERE event_name = %s",
                (name,)
            )
            event = cursor.fetchone()

            if not event:
                await interaction.response.send_message(
                    f"–°–æ–±—ã—Ç–∏–µ '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                    ephemeral=True
                )
                return

            # 2. –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–µ—Ä–≤—ã–º–∏
            cursor.execute(
                "DELETE FROM event_notifications WHERE event_id = %s",
                (event['event_id'],)
            )

            # 3. –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if event['event_id'] in self.active_messages:
                try:
                    cursor.execute(
                        "SELECT channel_id FROM events WHERE event_id = %s",
                        (event['event_id'],)
                    )
                    event_data = cursor.fetchone()
                    if event_data:
                        channel = self.bot.get_channel(event_data['channel_id'])
                        if channel:
                            try:
                                message = await channel.fetch_message(
                                    self.active_messages[event['event_id']]
                                )
                                await message.delete()
                            except:
                                pass
                except:
                    pass
                finally:
                    del self.active_messages[event['event_id']]

            # 4. –£–¥–∞–ª—è–µ–º —Å–∞–º–æ —Å–æ–±—ã—Ç–∏–µ
            cursor.execute(
                "DELETE FROM events WHERE event_name = %s",
                (name,)
            )

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            connection.commit()

            await interaction.response.send_message(
                f"‚úÖ –°–æ–±—ã—Ç–∏–µ '{name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!",
                ephemeral=True
            )

        except Exception as e:
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            connection.rollback()
            await interaction.response.send_message(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ '{name}': {str(e)}",
                ephemeral=True
            )
        finally:
            if connection.is_connected():
                connection.close()

    @tasks.loop(minutes=1)
    async def update_timers(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–π–º–µ—Ä—ã —Å–æ–±—ã—Ç–∏–π –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π"""
        connection = self.get_db_connection()
        if not connection:
            return

        cursor = connection.cursor(dictionary=True)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
            cursor.execute("SELECT * FROM events")
            all_events = cursor.fetchall()

            for event in all_events:
                event_datetime = event['event_date']
                now = datetime.now()

                # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ –∏–ª–∏ —É–∂–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥
                if event_datetime > now or (event['loop_interval'] and event['loop_interval'] != 'NONE'):
                    time_left = event_datetime - now
                    days = time_left.days
                    hours, remainder = divmod(time_left.seconds, 3600)
                    minutes, _ = divmod(remainder, 60)

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º
                    if event['event_id'] in self.active_messages:
                        try:
                            channel = self.bot.get_channel(event['channel_id'])
                            if channel:
                                message = await channel.fetch_message(
                                    self.active_messages[event['event_id']]
                                )

                                # –ï–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å embed
                                embed = discord.Embed(
                                    title=f"üîî –°–æ–±—ã—Ç–∏–µ: {event['event_name']}",
                                    description=(
                                        f"**–î–∞—Ç–∞:** {event_datetime.strftime('%d.%m.%Y %H:%M')}\n"
                                        f"**–û—Å—Ç–∞–ª–æ—Å—å:** {days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç\n"
                                        f"**–¢–∏–ø:** {LoopInterval[event['loop_interval']].value if event['loop_interval'] else '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ'}"
                                    ),
                                    color=discord.Color.gold()
                                )

                                view = discord.ui.View()
                                view.add_item(discord.ui.Button(
                                    style=discord.ButtonStyle.primary,
                                    label="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                                    custom_id=f"update_timer_{event['event_id']}"
                                ))
                                view.add_item(discord.ui.Button(
                                    style=discord.ButtonStyle.secondary,
                                    label="üìã –°–ø–∏—Å–æ–∫",
                                    custom_id=f"show_list_{event['event_id']}"
                                ))

                                await message.edit(embed=embed, view=view)
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞: {e}")

                # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ
                if event_datetime <= now:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    cursor.execute("""
                        SELECT 1 FROM event_notifications 
                        WHERE event_id = %s AND notified = 1
                    """, (event['event_id'],))
                    already_notified = cursor.fetchone()

                    if not already_notified:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        await self.send_notification(event)

                        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ–µ
                        cursor.execute("""
                            INSERT INTO event_notifications (event_id, notified)
                            VALUES (%s, 1)
                            ON DUPLICATE KEY UPDATE notified = 1
                        """, (event['event_id'],))
                        connection.commit()

                    # –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É
                    if event['loop_interval'] and event['loop_interval'] != 'NONE':
                        new_date = calculate_next_date(event_datetime, event['loop_interval'])

                        cursor.execute("""
                            UPDATE events SET event_date = %s
                            WHERE event_id = %s
                        """, (new_date, event['event_id']))
                        connection.commit()

                        # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ
                        if event['event_id'] not in self.active_messages:
                            try:
                                channel = self.bot.get_channel(event['channel_id'])
                                if channel:
                                    async for message in channel.history(limit=100):
                                        if message.embeds and f"–°–æ–±—ã—Ç–∏–µ: {event['event_name']}" in message.embeds[
                                            0].title:
                                            self.active_messages[event['event_id']] = message.id
                                            break
                            except:
                                pass
                    else:
                        # –î–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        if event['event_id'] in self.active_messages:
                            try:
                                channel = self.bot.get_channel(event['channel_id'])
                                if channel:
                                    message = await channel.fetch_message(
                                        self.active_messages[event['event_id']]
                                    )
                                    await message.delete()
                            except:
                                pass
                            finally:
                                del self.active_messages[event['event_id']]
        finally:
            if connection.is_connected():
                connection.close()

    @commands.Cog.listener()
    async def on_interaction(self, interaction: discord.Interaction):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫"""
        if not interaction.type == discord.InteractionType.component:
            return

        custom_id = interaction.data.get('custom_id', '')

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä"
        if custom_id.startswith('update_timer_'):
            event_id = int(custom_id.split('_')[2])
            await self.update_single_timer(interaction, event_id)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫"
        elif custom_id.startswith('show_list_'):
            event_id = int(custom_id.split('_')[2])
            await self.show_event_list(interaction, event_id)

    async def update_single_timer(self, interaction: discord.Interaction, event_id: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–π–º–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
        await interaction.response.defer(ephemeral=True)

        connection = self.get_db_connection()
        if not connection:
            return await interaction.followup.send(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î",
                ephemeral=True
            )

        try:
            cursor = connection.cursor(dictionary=True)
            cursor.execute(
                "SELECT * FROM events WHERE event_id = %s",
                (event_id,)
            )
            event = cursor.fetchone()

            if not event:
                return await interaction.followup.send(
                    "‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                    ephemeral=True
                )

            event_date = event['event_date']
            now = datetime.now()

            # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
            if event_date < now:
                event_date = event_date.replace(year=event_date.year + 1)
                cursor.execute(
                    "UPDATE events SET event_date = %s WHERE event_id = %s",
                    (event_date, event_id)
                )
                connection.commit()

            time_left = event_date - now
            days = time_left.days
            hours, remainder = divmod(time_left.seconds, 3600)
            minutes, _ = divmod(remainder, 60)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            channel = self.bot.get_channel(event['channel_id'])
            if channel:
                try:
                    message = await channel.fetch_message(
                        self.active_messages[event_id]
                    )

                    embed = discord.Embed(
                        title=f"üîî –°–æ–±—ã—Ç–∏–µ: {event['event_name']}",
                        description=(
                            f"**üóì –î–∞—Ç–∞:** {event_date.strftime('%d.%m.%Y %H:%M')}\n"
                            f"**‚è≥ –û—Å—Ç–∞–ª–æ—Å—å:** {days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç\n"
                            f"**üîÑ –ê–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä:** –ö–∞–∂–¥—ã–π –≥–æ–¥"
                        ),
                        color=discord.Color.gold()
                    )

                    view = discord.ui.View()
                    view.add_item(discord.ui.Button(
                        style=discord.ButtonStyle.primary,
                        label="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä",
                        custom_id=f"update_timer_{event_id}"
                    ))
                    view.add_item(discord.ui.Button(
                        style=discord.ButtonStyle.secondary,
                        label="üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫",
                        custom_id=f"show_list_{event_id}"
                    ))

                    await message.edit(embed=embed, view=view)

                except Exception as e:
                    await interaction.followup.send(
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}",
                        ephemeral=True
                    )
            else:
                await interaction.followup.send(
                    "‚ùå –ö–∞–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    ephemeral=True
                )

        except Exception as e:
            await interaction.followup.send(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}",
                ephemeral=True
            )
        finally:
            if connection.is_connected():
                connection.close()

    async def list_events(self, interaction: discord.Interaction):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º"""
        connection = self.get_db_connection()
        if not connection:
            return await interaction.response.send_message(
                "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î",
                ephemeral=True
            )

        cursor = connection.cursor(dictionary=True)
        cursor.execute("""
            SELECT * FROM events 
            WHERE event_date > NOW() 
            ORDER BY event_date
        """)
        events = cursor.fetchall()
        connection.close()

        if not events:
            return await interaction.response.send_message(
                "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π",
                ephemeral=True
            )

        embed = discord.Embed(
            title="üìÖ –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π",
            color=discord.Color.green(),
            timestamp=datetime.now()
        )

        for event in events:
            event_date = event['event_date']
            time_left = event_date - datetime.now()
            days = time_left.days
            hours, remainder = divmod(time_left.seconds, 3600)
            minutes, _ = divmod(remainder, 60)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            recipients = json.loads(event['recipients'])
            recipient_text = []
            for r in recipients:
                if r == "all":
                    recipient_text.append("–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏")
                elif r.startswith("role:"):
                    role_id = int(r.split(":")[1])
                    role = interaction.guild.get_role(role_id)
                    recipient_text.append(f"–†–æ–ª—å: {role.mention if role else '–ù–µ –Ω–∞–π–¥–µ–Ω–∞'}")
                elif r.startswith("user:"):
                    user_id = int(r.split(":")[1])
                    user = interaction.guild.get_member(user_id)
                    recipient_text.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.mention if user else '–ù–µ –Ω–∞–π–¥–µ–Ω'}")

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–±—ã—Ç–∏–∏
            embed.add_field(
                name=f"üîπ {event['event_name']}",
                value=(
                    f"**üóìÔ∏è –î–∞—Ç–∞:** {event_date.strftime('%d.%m.%Y %H:%M')}\n"
                    f"**‚è≥ –û—Å—Ç–∞–ª–æ—Å—å:** {days}–¥ {hours}—á {minutes}–º\n"
                    f"**üë• –î–ª—è:** {', '.join(recipient_text)}\n"
                    f"**üÜî ID:** {event['event_id']}"
                ),
                inline=False
            )

        embed.set_footer(text=f"–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
        await interaction.response.send_message(embed=embed, ephemeral=True)


async def setup(bot):
    await bot.add_cog(EventCommands(bot))