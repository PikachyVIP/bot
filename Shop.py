import discord
from discord.ext import commands
from discord import app_commands
import mysql.connector
from mysql.connector import Error
from data import mysqlconf



LEVELS_CONFIG = {
    1: {"xp": 0, "role": "üîπ –ö–∞–ø–µ–ª—å–∫–∞ –û–ø—ã—Ç–∞"},
    2: {"xp": 100, "role": "üå± –†–æ—Å—Ç–æ–∫ –ó–Ω–∞–Ω–∏–π"},
    3: {"xp": 250, "role": "üåÄ –í–∏—Ö—Ä—å –ù–∞—á–∏–Ω–∞–Ω–∏–π"},
    4: {"xp": 450, "role": "üå† –ú–µ—Ç–µ–æ—Ä –£—Å–µ—Ä–¥–∏—è"},
    5: {"xp": 700, "role": "üõ°Ô∏è –°—Ç—Ä–∞–∂ –ú—É–¥—Ä–æ—Å—Ç–∏"},
    6: {"xp": 1000, "role": "‚öîÔ∏è –†—ã—Ü–∞—Ä—å –î–∏—Å–∫—É—Å—Å–∏–π"},
    7: {"xp": 1350, "role": "üåå –•—Ä–∞–Ω–∏—Ç–µ–ª—å –¢—Ä–∞–¥–∏—Ü–∏–π"},
    8: {"xp": 1750, "role": "üè∞ –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –°–æ–æ–±—â–µ—Å—Ç–≤–∞"},
    9: {"xp": 2200, "role": "üîÆ –ú–∞–≥ –ö–æ–Ω—Ç–µ–Ω—Ç–∞"},
    10: {"xp": 2700, "role": "üêâ –õ–µ–≥–µ–Ω–¥–∞ –ß–∞—Ç–∞"},
    11: {"xp": 3250, "role": "üåã –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"},
    12: {"xp": 3850, "role": "‚ö° –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –î–∏–∞–ª–æ–≥–æ–≤"},
    13: {"xp": 4500, "role": "üåü –°–æ–∑–¥–∞—Ç–µ–ª—å –†–µ–∞–ª—å–Ω–æ—Å—Ç–∏"}
}


class Shop(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.MYSQL_CONFIG = mysqlconf

        self.shop_roles = {
            "‚úî": {"price": 1000, "description": "—Ç–µ—Å—Ç—Ä–æ–ª—å"}
        }

    def get_db_connection(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            return mysql.connector.connect(**self.MYSQL_CONFIG)
        except Error as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL: {e}")
            return None

    async def get_user_xp(self, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç XP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = self.get_db_connection()
        if not conn:
            return 0

        try:
            cursor = conn.cursor(dictionary=True)
            cursor.execute("SELECT xp FROM user_levels WHERE user_id = %s", (user_id,))
            result = cursor.fetchone()
            return result['xp'] if result else 0
        except Error as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ XP: {e}")
            return 0
        finally:
            if conn and conn.is_connected():
                conn.close()

    async def update_user_xp(self, user_id, amount):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç XP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = self.get_db_connection()
        if not conn:
            return False

        try:
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE user_levels SET xp = xp - %s WHERE user_id = %s",
                (amount, user_id)
            )
            conn.commit()
            return True
        except Error as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ XP: {e}")
            conn.rollback()
            return False
        finally:
            if conn and conn.is_connected():
                conn.close()

    @app_commands.command(name="shop", description="–ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π –∑–∞ XP")
    async def shop_command(self, interaction: discord.Interaction):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /shop"""
        await interaction.response.defer(ephemeral=True)
        try:
            await interaction.delete_original_response()
        except:
            pass

        user_xp = await self.get_user_xp(interaction.user.id)

        def calculate_level(xp: int) -> int:
            """–í—ã—á–∏—Å–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ XP"""
            for level, data in sorted(LEVELS_CONFIG.items(), reverse=True):
                if xp >= data["xp"]:
                    return level
            return 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_level = calculate_level(user_xp)

        embed = discord.Embed(
            title="üè™ –ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π",
            description=f"–í–∞—à –±–∞–ª–∞–Ω—Å: **{user_xp} XP** (–£—Ä–æ–≤–µ–Ω—å {current_level})\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
            color=discord.Color.gold()
        )

        for role_name, data in self.shop_roles.items():
            embed.add_field(
                name=f"{role_name} - {data['price']} XP",
                value=data['description'],
                inline=False
            )

        view = discord.ui.View(timeout=None)
        role_select = discord.ui.Select(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏",
            options=[
                discord.SelectOption(
                    label=f"{role_name} ({data['price']} XP)",
                    value=role_name,
                    description=data['description']
                ) for role_name, data in self.shop_roles.items()
            ]
        )

        async def update_roles(member: discord.Member, new_level: int):
            """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –µ–≥–æ —É—Ä–æ–≤–Ω–µ–º"""
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Ä–æ–ª–∏ —É—Ä–æ–≤–Ω–µ–π
            for level_data in LEVELS_CONFIG.values():
                role = discord.utils.get(member.guild.roles, name=level_data["role"])
                if role and role in member.roles:
                    await member.remove_roles(role)

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ä–æ–ª—å —É—Ä–æ–≤–Ω—è
            new_role_data = LEVELS_CONFIG.get(new_level)
            if new_role_data:
                new_role = discord.utils.get(member.guild.roles, name=new_role_data["role"])
                if new_role:
                    await member.add_roles(new_role)

        async def select_callback(interaction: discord.Interaction):
            selected_role_name = role_select.values[0]
            role_data = self.shop_roles[selected_role_name]

            target_role = discord.utils.get(interaction.guild.roles, name=selected_role_name)
            if not target_role:
                return await interaction.response.send_message(
                    f"–†–æ–ª—å {selected_role_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!",
                    ephemeral=True
                )

            if user_xp < role_data['price']:
                return await interaction.response.send_message(
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ XP! –ù—É–∂–Ω–æ {role_data['price']} XP, —É –≤–∞—Å {user_xp} XP.",
                    ephemeral=True
                )

            if target_role in interaction.user.roles:
                return await interaction.response.send_message(
                    f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–æ–ª—å {target_role.mention}!",
                    ephemeral=True
                )

            confirm_embed = discord.Embed(
                title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏",
                description=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Ä–æ–ª—å {target_role.mention} –∑–∞ {role_data['price']} XP?",
                color=discord.Color.blue()
            )

            confirm_view = discord.ui.View()

            confirm_button = discord.ui.Button(label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", style=discord.ButtonStyle.green)
            cancel_button = discord.ui.Button(label="–û—Ç–º–µ–Ω–∞", style=discord.ButtonStyle.red)

            async def confirm_callback(interaction: discord.Interaction):
                try:
                    if await self.update_user_xp(interaction.user.id, role_data['price']):
                        # –í—ã–¥–∞–µ–º –∫—É–ø–ª–µ–Ω–Ω—É—é —Ä–æ–ª—å
                        await interaction.user.add_roles(target_role)

                        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ —Ä–æ–ª–∏
                        new_xp = user_xp - role_data['price']
                        new_level = calculate_level(new_xp)

                        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        conn = self.get_db_connection()
                        if conn:
                            try:
                                cursor = conn.cursor()
                                cursor.execute(
                                    "UPDATE user_levels SET level = %s WHERE user_id = %s",
                                    (new_level, interaction.user.id)
                                )
                                conn.commit()
                            finally:
                                if conn.is_connected():
                                    conn.close()

                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª–∏ —É—Ä–æ–≤–Ω—è
                        await update_roles(interaction.user, new_level)

                        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–æ–ª–∏ —É—Ä–æ–≤–Ω—è
                        new_role_name = LEVELS_CONFIG.get(new_level, {}).get("role", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å")

                        success_embed = discord.Embed(
                            title="–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!",
                            description=(
                                f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ä–æ–ª—å {target_role.mention} –∑–∞ {role_data['price']} XP!\n"
                                f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: **{new_xp} XP** (–£—Ä–æ–≤–µ–Ω—å {new_level})\n"
                                f"–ù–æ–≤–∞—è —Ä–æ–ª—å —É—Ä–æ–≤–Ω—è: **{new_role_name}**"
                            ),
                            color=discord.Color.green()
                        )
                        await interaction.response.edit_message(embed=success_embed, view=None)
                    else:
                        await interaction.response.edit_message(
                            content="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ XP. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                            embed=None,
                            view=None
                        )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏: {e}")
                    await interaction.response.edit_message(
                        content="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.",
                        embed=None,
                        view=None
                    )

            confirm_button.callback = confirm_callback
            confirm_view.add_item(confirm_button)

            async def cancel_callback(interaction: discord.Interaction):
                await interaction.response.edit_message(
                    content="–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                    embed=None,
                    view=None
                )

            cancel_button.callback = cancel_callback
            confirm_view.add_item(cancel_button)

            await interaction.response.send_message(
                embed=confirm_embed,
                view=confirm_view,
                ephemeral=True
            )

        role_select.callback = select_callback
        view.add_item(role_select)

        await interaction.followup.send(embed=embed, view=view, ephemeral=True)

    @classmethod
    async def setup(cls, bot):
        await bot.add_cog(cls(bot))